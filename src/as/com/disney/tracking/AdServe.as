//---------------------------------------------------------------------------------------------------------------// DOL AdSales AdServe Class// Original Author: Mitch Cichocki// Revised by: Chris Ellerby// Revised by: James Oquendo//---------------------------------------------------------------------------------------------------------------package com.disney.tracking{    import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Loader;    import flash.events.*;	import flash.net.URLLoader;	import flash.net.navigateToURL;    import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.*;	import flash.system.Security;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class AdServe extends Sprite{		//-----------------------------------------------------------------------------------------------------------		// Class Variables		var flashAdLoc:String;		var advert_lv:URLLoader;		var adHolder:Sprite;		var adToLoad:URLRequest;		var temp_mc:MovieClip;		var tempString:String;		var adServeObj:Object;		var showAllAds:Boolean;		var useDisclaimer:Boolean;		var disneyOwned:Boolean;		var disneySites:Array = new Array(".go.", ".disneyfairies.", ".dolimg.",".amplified.");		var urlFlashAd:String;		var sendUrl:String;		//-----------------------------------------------------------------------------------------------------------		// Constructor		public function AdServe(flashAdPath, showAllAds, useDisclaim) {			trace("--- Ad Serve Object Created ---");			advert_lv:URLLoader;			adServeObj = this;			flashAdLoc = flashAdPath;			showAllAds = showAllAds;			useDisclaimer = useDisclaim;						// start a timer to wait for initial load			var timer:Timer = new Timer(150, 1);			timer.addEventListener(TimerEvent.TIMER, loadSponsor);			timer.start();			//loadSponsor(flashAdPath, showAllAds, adServeObj);		}		//-----------------------------------------------------------------------------------------------------------		// Load Sponsor        //public function loadSponsor(flashAdLoc, showAllAds, adServeObj) {		public function loadSponsor(event:TimerEvent) {			Security.allowDomain("*");            			try {								//var urlFlashAd:String = flashAdLoc+"?rnd="+randomNumber(10000, 40000);				var urlFlashAd:String = flashAdLoc+"?rnd="+randomNumber(10000, 40000);				var advert_lv:URLLoader = new URLLoader(new URLRequest(urlFlashAd));				configureListeners(advert_lv);				                advert_lv.data = urlFlashAd;				trace("url: " + advert_lv.data);				loadAds(advert_lv.data, showAllAds, adServeObj);				//trace("what is adServeObj.advert_lv: " + adServeObj.advert_lv);            } catch (error:Error) {                trace("Unable to load requested document.");				//trace(error);            }			        }		public function randomNumber(low:Number=NaN, high:Number=NaN):Number{			  // set random seed to bust cache			  var low:Number = 10000;			  var high:Number = 40000;			  return Math.floor(Math.random() * (1+high-low)) + low;		}        private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler);			dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);        }			        private function completeHandler(event:Event):void {            var advert_lv:URLLoader = URLLoader(event.target);			//THIS REMOVES LEADING AND TRAILING AMPERSANDS			var array:Array = advert_lv.data.split("&");			array.pop();			array.shift();			for(var i:int = 0; i < array.length; i++){				if(array[i].length == 0){					array.splice(i, 1);				}			}						tempString = array.join("&");		   	var impressionLoader:Loader = new Loader();		   	impressionLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadImpressionCompleteHandler);			impressionLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);		   	impressionLoader.load(new URLRequest(tempString));			//trace(tempString); //TRACES OUT FLASHAD.HTML						loadAds(tempString, showAllAds, adServeObj);			trace("Adserve data fully loaded!");        }							//-----------------------------------------------------------------------------------------------------------		// LOADING IMPRESSIONS		public function loadAds(varObj, showAllAds, adServeObj) {			//trace(varObj);									var xOffset:Number = -5000;			var adCount:Number = 0;						var vars:URLVariables = new URLVariables(varObj);					for (var urls in vars) {				trace("urls " + urls);								if (urls.indexOf("flashClickThru") != -1) {										//OUTPUTS ASSIGNED ADSERVE URLS					var lastDigit:Number = urls.substr(-1, 1);					var startPos:Number = tempString.search("goto%3d");					var nextPos:Number = tempString.search("&flashAd"+lastDigit);					var sendUrl = tempString.slice(startPos+7,nextPos);					sendUrl = sendUrl.substr(-100);					var newPos:Number = sendUrl.search("http");					sendUrl = sendUrl.slice(newPos,sendUrl.length);					//trace(urls + " - " + sendUrl);									}			}						for (var ad in vars) {				trace("vars: "+vars[ad]);							if (ad.indexOf("flashAd") != -1) {										//trace("These are ads: " + ad);					//trace("varObj: " + varObj);										var ldr:Loader = new Loader();					var adToLoad:URLRequest = new URLRequest(vars[ad]);					ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);  //NEWLY ADDED					ldr.load(adToLoad);										var temp_mc:Sprite = new Sprite();					temp_mc.x = xOffset;					addChild(temp_mc);					//trace(temp_mc);					if (showAllAds == true) {									            temp_mc.addChild(ldr);						ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, temp_mccompleteHandler);											}				}				var adHolder:Sprite = new Sprite();				addChild(adHolder);			}					}				private function temp_mcconfigureListeners(dispatcher:IEventDispatcher):void {				dispatcher.addEventListener(Event.COMPLETE, temp_mccompleteHandler);				dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);  //NEWLY ADDED				dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);  //NEWLY ADDED						}												private function temp_mccompleteHandler(event:Event):void {				var adHolder:URLLoader = new URLLoader();				adHolder.load(adToLoad);											var request:URLRequest = new URLRequest(adToLoad+"?rand="+Math.random());				try {					temp_mc.load(request);				} catch (error:Error) {					trace("Unable to load requested document.");					adServeObj.completed = true;				}						}		private function loadImpressionCompleteHandler(event:Event):void{			trace("impression loaded");		}        private function ioErrorHandler(event:IOErrorEvent):void {                   }		private function httpStatusHandler(event:HTTPStatusEvent):void{		}		//-----------------------------------------------------------------------------------------------------------		// Check URL		public function checkURL(sendUrl) {						var disneyOwned = false;			var mySubstring:String;			mySubstring = sendUrl.substring(50);			for (var i = 0; i<disneySites.length; i++) {				if (mySubstring.indexOf(disneySites[i])>0) {					disneyOwned = true;					trace("Yes, this site is Disney owned.");				}			}			return disneyOwned;		}		//-----------------------------------------------------------------------------------------------------------		// Click Ad			public function clickAd(clickThru) {			trace("Inside clickAd function");						var num:Number = clickThru;			num = num + 1;			//trace("lastDigit = " + tempString.length);			//trace("\n"+tempString+"\n");  //TRACES OUT ENTIRE FLASHAD.HTML MINUS LEADING AND TRAILING AMPERSANDS (&)			var my_str:String = "flashClickThru"+clickThru+"=";			//trace("Start position of adserve clickThru value: " + tempString.search("flashClickThru"+clickThru+"="));			//trace("Character count of clickthru string, value, and equal sign: " + my_str.length); //GETTING STRING LENGTH TO ADD TO START POSITION															var firstPos:Number = tempString.search("flashClickThru"+clickThru+"=");			var nextPos:Number;			var vars:Number = tempString.search("&flashAd"+ num);						if (vars == -1){				nextPos = tempString.length;  //firstPos+my_str.length+;								//trace("Starting position of next adserve: " + nextPos); //DETERMINING LAST POSITION			} else if (vars != -1){				trace("Starting position of next adserve: " + tempString.search("&flashAd"+ num)); //DETERMINING LAST POSITION				nextPos = tempString.search("&flashAd"+ num);			}			var sendUrl = tempString.slice(firstPos+my_str.length,nextPos);												//trace(sendUrl.replace(pattern, "%26"));			trace(sendUrl);			var swfurl:String = sendUrl;			clickThru = "flashClickThru"+clickThru;			var swfldr:Loader = new Loader();			if (!checkURL(sendUrl) && useDisclaimer == true) {								if (sendUrl.indexOf("ad.doubleclick.net") !=-1) {															 					//.swf					trace("--- Loading swf: "+clickThru);					swfldr.contentLoaderInfo.addEventListener(Event.COMPLETE, swfldrCompleteHandler);					swfldr.load(new URLRequest(swfurl));				}				else				{					//use disclaimer					var thisUrl:String = "http://home.disney.go.com/guestservices/disclaimers/redirect?destination="+sendUrl;					var pattern:RegExp = /&/gi;					var url = thisUrl.replace(pattern, "%26");					//trace("url " + url);					var request:URLRequest = new URLRequest(url);					try {            						navigateToURL(request);					}					catch (e:Error) {						// handle error here					}					trace("--- Calling Disney Disclaimer: "+clickThru)				}							} else if (sendUrl.indexOf(".swf") != -1) {				//.swf				trace("--- Loading swf: "+clickThru);				swfldr.contentLoaderInfo.addEventListener(Event.COMPLETE, swfldrCompleteHandler);				swfldr.load(new URLRequest(swfurl));								//adHolder.addChild(swfldr);			} else if (sendUrl.indexOf(".pdf") != -1) {				//.pdf				trace("--- Loading pdf: " +clickThru);				var pdfurl:String = sendUrl;				var pdfrequest:URLRequest = new URLRequest(pdfurl);				navigateToURL(pdfrequest, "_blank");			} else {				//no disclaimer--Disney site  				trace("--- Loading a disney site. No Disclaimer"+"\n"+"TRACE: "+ sendUrl);				var nodiscurl:String = sendUrl;				var nodiscrequest:URLRequest = new URLRequest(nodiscurl);								navigateToURL(nodiscrequest, "_self");			}		}				private function swfldrCompleteHandler(event:Event):void{			//trace("click thru loaded");		}						//-----------------------------------------------------------------------------------------------------------		// Show Ad//		function showAd(fAd) {//			fAd = "flashAd"+fAd;//			//var randSeed = 10000;//			adToLoad = this.advert_lv+"."+fAd;//			fAd+"_mc".loadMovie(adToLoad+"?rand="+Math.random());//		}	}	}