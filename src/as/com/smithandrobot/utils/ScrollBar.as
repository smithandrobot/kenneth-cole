package com.smithandrobot.utils{	import flash.display.Stage;	import flash.display.MovieClip;	import flash.events.*;	import flash.geom.Rectangle;	import flash.display.Stage;		import com.smithandrobot.events.ScrollbarEvent;		public class ScrollBar extends EventDispatcher	{				private var host_mc 		: MovieClip;		private var call_back		: Function;		                        			private var drag_mc 		: MovieClip;		private var track_mc 		: MovieClip;		private var upMc 			: MovieClip;		private var downMc 			: MovieClip;		private var scroll_rect 	: Rectangle;		private var upper_limit 	: Number;		private var range			: Number;				private var _clickIncrement	: Number = 5;				public function ScrollBar( _mc:MovieClip, cb:Function ) 		{			host_mc 				= _mc;			call_back 				= cb;						drag_mc 				= host_mc.drag;			drag_mc.buttonMode 		= true;			drag_mc.mouseChildren 	= false			drag_mc.addEventListener( MouseEvent.MOUSE_DOWN, press_drag );						track_mc 				= host_mc.track;			track_mc.buttonMode		= true;			track_mc.mouseChildren 	= false			track_mc.addEventListener( MouseEvent.CLICK, click_track );								upMc 					= host_mc.up;			downMc 					= host_mc.down;						upMc.buttonMode 		= true;			upMc.mouseChildren 		= false			upMc.addEventListener( MouseEvent.CLICK, moveScrollUp);						downMc.buttonMode 		= true;			downMc.mouseChildren 	= false			downMc.addEventListener( MouseEvent.CLICK, moveScrollDown);						set_limits();					}						private function added(e)		{			drag_mc.stage.addEventListener( MouseEvent.MOUSE_UP, release_drag);			}		public function cleanUp() : void		{			//drag_mc.stage.removeEventListener( MouseEvent.MOUSE_UP, release_drag);			//drag_mc.removeEventListener( Event.ENTER_FRAME, drag );		}						public function set clickIncrement(i:Number) : void		{			_clickIncrement = i		}						private function press_drag( event:MouseEvent ):void 		{			var bkgMc = host_mc.parent.getChildByName("bkg") as MovieClip;			drag_mc.addEventListener( MouseEvent.MOUSE_UP, release_drag);			upMc.addEventListener( MouseEvent.MOUSE_UP, release_drag);			downMc.addEventListener( MouseEvent.MOUSE_UP, release_drag);			track_mc.addEventListener( MouseEvent.MOUSE_UP, release_drag);			bkgMc.addEventListener( MouseEvent.MOUSE_UP, release_drag);			drag_mc.stage.addEventListener( MouseEvent.MOUSE_UP, release_drag);			drag_mc.startDrag( false, scroll_rect );			drag_mc.addEventListener( Event.ENTER_FRAME, drag );		}						private function release_drag( event:MouseEvent ):void {						drag_mc.removeEventListener( Event.ENTER_FRAME, drag );			drag_mc.removeEventListener( MouseEvent.MOUSE_UP, release_drag );			drag_mc.parent.stage.removeEventListener( MouseEvent.MOUSE_UP, release_drag );			drag_mc.stopDrag();		}						private function click_track( event:MouseEvent ):void {			trace( "Click track" );		}						private function set_limits():void 		{			scroll_rect = new Rectangle( track_mc.x, track_mc.y, 0, track_mc.height - drag_mc.height );			upper_limit = track_mc.y;			range = track_mc.height - drag_mc.height;		}						private function moveScrollUp(e:MouseEvent)		{			var tempY = drag_mc.y;			var top = track_mc.y//upMc.y+upMc.height;						if((tempY - _clickIncrement) < top)			{				drag_mc.y = top;			}else{				drag_mc.y -=  _clickIncrement;			}						drag(new Event(Event.ENTER_FRAME))		}				private function moveScrollDown(e:MouseEvent)		{						var tempY = drag_mc.y + drag_mc.height;						if((tempY + _clickIncrement) > (track_mc.y + track_mc.height))			{				drag_mc.y = (track_mc.y + track_mc.height) - drag_mc.height;			}else{				drag_mc.y +=  _clickIncrement;			}						drag(new Event(Event.ENTER_FRAME))		}						private function drag( event:Event ):void {			var p = ( drag_mc.y - track_mc.y ) / range;			dispatchEvent(new ScrollbarEvent(ScrollbarEvent.SCROLL, p));		}	}}